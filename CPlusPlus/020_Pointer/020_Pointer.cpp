#include <iostream>

int main()
{
	// 모든 포인터는 64비트에서 8바이트 크기를 가진다.
	// 32비트일때 4바이트

	// 4바이트 정수
	// int;

	{
		// 8바이트 정수
		// 9223372036854775807
		//         17179869184
		//          4294967296
		//         68719476736
		//        264491760644
		__int64 Value = 0;
	}
	{
		// 포인터란 c++의 자료형의 한 형태며
		// 자료형 뒤에 *을 붙이는 문법을 통해서
		// 선언한다.

		// 일반적인 자료형이 가능하고
		bool* Ptrb;

		// 램에서의 위치를 의미하게 됩니다.

		int Value0 = 10;
		int Value1 = 10;
		// 이름이 값 그자체를 의미하게 된다.
		// 100번지에있는 10이 되는것.
		// Value < 9;

		// Value가 표현하는 값이 2가지 있다.
		// 내부의 자신의 진짜 값 10
		// 그 이름을 통해서 램에 존재하게 되는 자신의 위치인 100번지
		int* ValuePtr0 = &Value0;
		int* ValuePtr1 = &Value1;

		// 그 주소(램에서의 위치의 정수값)를 전문적으로 다루는

		// 형변환이라는것을 맛만 보여드릴겁니다.
		// 어떤 자료형 앞에 (자료형) 이 자료형으로 바꿀수 있으면
		// 빠꿔달라는 뜻이 됩니다.

		// 운영체제가 임의대로의 주소를 부여해주는것은 virtual 주소라고 합니다.
		__int64 Address0 = 0;
		Address0 = (__int64)ValuePtr0;

		__int64 Address1 = 0;
		Address1 = (__int64)ValuePtr1;
		int a = 0;

		// 코드로 쳐졌다면 램의 어딘가에는 존재해야 한다.
		// 모든건 위치가 있고 크기가 있어야 한다.
		// 주소값이라는것은 램의 위치를 표현하는 정수인데.
		// bool* 
		// int* 
		// 크기가 다를까?
	}

	{
		// 16진수 표현법
		int Value2 = 0b00000000000000000000000000000001;
		//             4바이트를 표현하는 16 진수
		int Value16 = 0xffffffff;

		//                               8421
		// 0b0000000000000000000000000000 0101;
		// 0x   f   f   f   f   f   f   f    5;

		//                     101112131415
		// 0 1 2 3 4 5 6 7 8 9 a b c d e f
	}

}
